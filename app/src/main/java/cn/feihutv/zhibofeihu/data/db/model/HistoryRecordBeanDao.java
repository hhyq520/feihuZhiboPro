package cn.feihutv.zhibofeihu.data.db.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HISTORY_RECORD_BEAN".
*/
public class HistoryRecordBeanDao extends AbstractDao<HistoryRecordBean, Long> {

    public static final String TABLENAME = "HISTORY_RECORD_BEAN";

    /**
     * Properties of entity HistoryRecordBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, String.class, "userId", false, "USER_ID");
        public final static Property RoomId = new Property(2, String.class, "roomId", false, "ROOM_ID");
        public final static Property HeadUrl = new Property(3, String.class, "headUrl", false, "HEAD_URL");
        public final static Property Title = new Property(4, String.class, "title", false, "TITLE");
        public final static Property HostName = new Property(5, String.class, "hostName", false, "HOST_NAME");
        public final static Property Time = new Property(6, long.class, "time", false, "TIME");
        public final static Property BrocastType = new Property(7, int.class, "brocastType", false, "BROCAST_TYPE");
    }


    public HistoryRecordBeanDao(DaoConfig config) {
        super(config);
    }
    
    public HistoryRecordBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HISTORY_RECORD_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" TEXT," + // 1: userId
                "\"ROOM_ID\" TEXT," + // 2: roomId
                "\"HEAD_URL\" TEXT," + // 3: headUrl
                "\"TITLE\" TEXT," + // 4: title
                "\"HOST_NAME\" TEXT," + // 5: hostName
                "\"TIME\" INTEGER NOT NULL ," + // 6: time
                "\"BROCAST_TYPE\" INTEGER NOT NULL );"); // 7: brocastType
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HISTORY_RECORD_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HistoryRecordBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String roomId = entity.getRoomId();
        if (roomId != null) {
            stmt.bindString(3, roomId);
        }
 
        String headUrl = entity.getHeadUrl();
        if (headUrl != null) {
            stmt.bindString(4, headUrl);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(5, title);
        }
 
        String hostName = entity.getHostName();
        if (hostName != null) {
            stmt.bindString(6, hostName);
        }
        stmt.bindLong(7, entity.getTime());
        stmt.bindLong(8, entity.getBrocastType());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HistoryRecordBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String roomId = entity.getRoomId();
        if (roomId != null) {
            stmt.bindString(3, roomId);
        }
 
        String headUrl = entity.getHeadUrl();
        if (headUrl != null) {
            stmt.bindString(4, headUrl);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(5, title);
        }
 
        String hostName = entity.getHostName();
        if (hostName != null) {
            stmt.bindString(6, hostName);
        }
        stmt.bindLong(7, entity.getTime());
        stmt.bindLong(8, entity.getBrocastType());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public HistoryRecordBean readEntity(Cursor cursor, int offset) {
        HistoryRecordBean entity = new HistoryRecordBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // roomId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // headUrl
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // title
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // hostName
            cursor.getLong(offset + 6), // time
            cursor.getInt(offset + 7) // brocastType
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HistoryRecordBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRoomId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setHeadUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTitle(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setHostName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTime(cursor.getLong(offset + 6));
        entity.setBrocastType(cursor.getInt(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(HistoryRecordBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(HistoryRecordBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(HistoryRecordBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
