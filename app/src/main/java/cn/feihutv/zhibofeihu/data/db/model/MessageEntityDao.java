package cn.feihutv.zhibofeihu.data.db.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MESSAGE_ENTITY".
*/
public class MessageEntityDao extends AbstractDao<MessageEntity, Long> {

    public static final String TABLENAME = "MESSAGE_ENTITY";

    /**
     * Properties of entity MessageEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Time = new Property(0, long.class, "time", true, "_id");
        public final static Property Content = new Property(1, String.class, "content", false, "CONTENT");
        public final static Property SenderId = new Property(2, String.class, "senderId", false, "SENDER_ID");
        public final static Property HeadUrl = new Property(3, String.class, "headUrl", false, "HEAD_URL");
        public final static Property NickName = new Property(4, String.class, "nickName", false, "NICK_NAME");
        public final static Property IsComMeg = new Property(5, boolean.class, "isComMeg", false, "IS_COM_MEG");
        public final static Property Level = new Property(6, String.class, "level", false, "LEVEL");
        public final static Property UserId = new Property(7, String.class, "userId", false, "USER_ID");
        public final static Property MsgStatus = new Property(8, int.class, "msgStatus", false, "MSG_STATUS");
    }


    public MessageEntityDao(DaoConfig config) {
        super(config);
    }
    
    public MessageEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MESSAGE_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: time
                "\"CONTENT\" TEXT," + // 1: content
                "\"SENDER_ID\" TEXT," + // 2: senderId
                "\"HEAD_URL\" TEXT," + // 3: headUrl
                "\"NICK_NAME\" TEXT," + // 4: nickName
                "\"IS_COM_MEG\" INTEGER NOT NULL ," + // 5: isComMeg
                "\"LEVEL\" TEXT," + // 6: level
                "\"USER_ID\" TEXT," + // 7: userId
                "\"MSG_STATUS\" INTEGER NOT NULL );"); // 8: msgStatus
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MESSAGE_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MessageEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getTime());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(2, content);
        }
 
        String senderId = entity.getSenderId();
        if (senderId != null) {
            stmt.bindString(3, senderId);
        }
 
        String headUrl = entity.getHeadUrl();
        if (headUrl != null) {
            stmt.bindString(4, headUrl);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(5, nickName);
        }
        stmt.bindLong(6, entity.getIsComMeg() ? 1L: 0L);
 
        String level = entity.getLevel();
        if (level != null) {
            stmt.bindString(7, level);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(8, userId);
        }
        stmt.bindLong(9, entity.getMsgStatus());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MessageEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getTime());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(2, content);
        }
 
        String senderId = entity.getSenderId();
        if (senderId != null) {
            stmt.bindString(3, senderId);
        }
 
        String headUrl = entity.getHeadUrl();
        if (headUrl != null) {
            stmt.bindString(4, headUrl);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(5, nickName);
        }
        stmt.bindLong(6, entity.getIsComMeg() ? 1L: 0L);
 
        String level = entity.getLevel();
        if (level != null) {
            stmt.bindString(7, level);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(8, userId);
        }
        stmt.bindLong(9, entity.getMsgStatus());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public MessageEntity readEntity(Cursor cursor, int offset) {
        MessageEntity entity = new MessageEntity( //
            cursor.getLong(offset + 0), // time
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // content
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // senderId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // headUrl
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // nickName
            cursor.getShort(offset + 5) != 0, // isComMeg
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // level
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // userId
            cursor.getInt(offset + 8) // msgStatus
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MessageEntity entity, int offset) {
        entity.setTime(cursor.getLong(offset + 0));
        entity.setContent(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSenderId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setHeadUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNickName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIsComMeg(cursor.getShort(offset + 5) != 0);
        entity.setLevel(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUserId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setMsgStatus(cursor.getInt(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MessageEntity entity, long rowId) {
        entity.setTime(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MessageEntity entity) {
        if(entity != null) {
            return entity.getTime();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MessageEntity entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
