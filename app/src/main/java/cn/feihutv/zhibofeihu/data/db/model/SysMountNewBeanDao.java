package cn.feihutv.zhibofeihu.data.db.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SYS_MOUNT_NEW_BEAN".
*/
public class SysMountNewBeanDao extends AbstractDao<SysMountNewBean, String> {

    public static final String TABLENAME = "SYS_MOUNT_NEW_BEAN";

    /**
     * Properties of entity SysMountNewBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property IsAnimation = new Property(2, String.class, "isAnimation", false, "IS_ANIMATION");
        public final static Property Level = new Property(3, String.class, "level", false, "LEVEL");
        public final static Property Icon = new Property(4, String.class, "icon", false, "ICON");
        public final static Property AnimName = new Property(5, String.class, "animName", false, "ANIM_NAME");
    }


    public SysMountNewBeanDao(DaoConfig config) {
        super(config);
    }
    
    public SysMountNewBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SYS_MOUNT_NEW_BEAN\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"IS_ANIMATION\" TEXT," + // 2: isAnimation
                "\"LEVEL\" TEXT," + // 3: level
                "\"ICON\" TEXT," + // 4: icon
                "\"ANIM_NAME\" TEXT);"); // 5: animName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SYS_MOUNT_NEW_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SysMountNewBean entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String isAnimation = entity.getIsAnimation();
        if (isAnimation != null) {
            stmt.bindString(3, isAnimation);
        }
 
        String level = entity.getLevel();
        if (level != null) {
            stmt.bindString(4, level);
        }
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(5, icon);
        }
 
        String animName = entity.getAnimName();
        if (animName != null) {
            stmt.bindString(6, animName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SysMountNewBean entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String isAnimation = entity.getIsAnimation();
        if (isAnimation != null) {
            stmt.bindString(3, isAnimation);
        }
 
        String level = entity.getLevel();
        if (level != null) {
            stmt.bindString(4, level);
        }
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(5, icon);
        }
 
        String animName = entity.getAnimName();
        if (animName != null) {
            stmt.bindString(6, animName);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public SysMountNewBean readEntity(Cursor cursor, int offset) {
        SysMountNewBean entity = new SysMountNewBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // isAnimation
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // level
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // icon
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // animName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SysMountNewBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIsAnimation(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLevel(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIcon(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAnimName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final String updateKeyAfterInsert(SysMountNewBean entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(SysMountNewBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SysMountNewBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
