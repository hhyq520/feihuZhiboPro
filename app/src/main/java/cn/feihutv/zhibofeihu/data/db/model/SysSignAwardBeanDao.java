package cn.feihutv.zhibofeihu.data.db.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SYS_SIGN_AWARD_BEAN".
*/
public class SysSignAwardBeanDao extends AbstractDao<SysSignAwardBean, String> {

    public static final String TABLENAME = "SYS_SIGN_AWARD_BEAN";

    /**
     * Properties of entity SysSignAwardBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Day = new Property(0, String.class, "day", true, "DAY");
        public final static Property Goods = new Property(1, String.class, "goods", false, "GOODS");
    }


    public SysSignAwardBeanDao(DaoConfig config) {
        super(config);
    }
    
    public SysSignAwardBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SYS_SIGN_AWARD_BEAN\" (" + //
                "\"DAY\" TEXT PRIMARY KEY NOT NULL ," + // 0: day
                "\"GOODS\" TEXT);"); // 1: goods
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SYS_SIGN_AWARD_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SysSignAwardBean entity) {
        stmt.clearBindings();
 
        String day = entity.getDay();
        if (day != null) {
            stmt.bindString(1, day);
        }
 
        String goods = entity.getGoods();
        if (goods != null) {
            stmt.bindString(2, goods);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SysSignAwardBean entity) {
        stmt.clearBindings();
 
        String day = entity.getDay();
        if (day != null) {
            stmt.bindString(1, day);
        }
 
        String goods = entity.getGoods();
        if (goods != null) {
            stmt.bindString(2, goods);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public SysSignAwardBean readEntity(Cursor cursor, int offset) {
        SysSignAwardBean entity = new SysSignAwardBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // day
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // goods
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SysSignAwardBean entity, int offset) {
        entity.setDay(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setGoods(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    @Override
    protected final String updateKeyAfterInsert(SysSignAwardBean entity, long rowId) {
        return entity.getDay();
    }
    
    @Override
    public String getKey(SysSignAwardBean entity) {
        if(entity != null) {
            return entity.getDay();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SysSignAwardBean entity) {
        return entity.getDay() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
