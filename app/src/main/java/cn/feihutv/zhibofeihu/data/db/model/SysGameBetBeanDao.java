package cn.feihutv.zhibofeihu.data.db.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SYS_GAME_BET_BEAN".
*/
public class SysGameBetBeanDao extends AbstractDao<SysGameBetBean, Long> {

    public static final String TABLENAME = "SYS_GAME_BET_BEAN";

    /**
     * Properties of entity SysGameBetBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property LevelStart = new Property(0, long.class, "levelStart", true, "_id");
        public final static Property LevelEnd = new Property(1, long.class, "levelEnd", false, "LEVEL_END");
        public final static Property MaxBankerCnt = new Property(2, String.class, "maxBankerCnt", false, "MAX_BANKER_CNT");
        public final static Property MaxBankerBet = new Property(3, String.class, "maxBankerBet", false, "MAX_BANKER_BET");
        public final static Property MaxPlayerCnt = new Property(4, String.class, "maxPlayerCnt", false, "MAX_PLAYER_CNT");
        public final static Property MaxPlayerBat = new Property(5, String.class, "maxPlayerBat", false, "MAX_PLAYER_BAT");
    }


    public SysGameBetBeanDao(DaoConfig config) {
        super(config);
    }
    
    public SysGameBetBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SYS_GAME_BET_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: levelStart
                "\"LEVEL_END\" INTEGER NOT NULL ," + // 1: levelEnd
                "\"MAX_BANKER_CNT\" TEXT," + // 2: maxBankerCnt
                "\"MAX_BANKER_BET\" TEXT," + // 3: maxBankerBet
                "\"MAX_PLAYER_CNT\" TEXT," + // 4: maxPlayerCnt
                "\"MAX_PLAYER_BAT\" TEXT);"); // 5: maxPlayerBat
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SYS_GAME_BET_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SysGameBetBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getLevelStart());
        stmt.bindLong(2, entity.getLevelEnd());
 
        String maxBankerCnt = entity.getMaxBankerCnt();
        if (maxBankerCnt != null) {
            stmt.bindString(3, maxBankerCnt);
        }
 
        String maxBankerBet = entity.getMaxBankerBet();
        if (maxBankerBet != null) {
            stmt.bindString(4, maxBankerBet);
        }
 
        String maxPlayerCnt = entity.getMaxPlayerCnt();
        if (maxPlayerCnt != null) {
            stmt.bindString(5, maxPlayerCnt);
        }
 
        String maxPlayerBat = entity.getMaxPlayerBat();
        if (maxPlayerBat != null) {
            stmt.bindString(6, maxPlayerBat);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SysGameBetBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getLevelStart());
        stmt.bindLong(2, entity.getLevelEnd());
 
        String maxBankerCnt = entity.getMaxBankerCnt();
        if (maxBankerCnt != null) {
            stmt.bindString(3, maxBankerCnt);
        }
 
        String maxBankerBet = entity.getMaxBankerBet();
        if (maxBankerBet != null) {
            stmt.bindString(4, maxBankerBet);
        }
 
        String maxPlayerCnt = entity.getMaxPlayerCnt();
        if (maxPlayerCnt != null) {
            stmt.bindString(5, maxPlayerCnt);
        }
 
        String maxPlayerBat = entity.getMaxPlayerBat();
        if (maxPlayerBat != null) {
            stmt.bindString(6, maxPlayerBat);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public SysGameBetBean readEntity(Cursor cursor, int offset) {
        SysGameBetBean entity = new SysGameBetBean( //
            cursor.getLong(offset + 0), // levelStart
            cursor.getLong(offset + 1), // levelEnd
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // maxBankerCnt
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // maxBankerBet
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // maxPlayerCnt
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // maxPlayerBat
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SysGameBetBean entity, int offset) {
        entity.setLevelStart(cursor.getLong(offset + 0));
        entity.setLevelEnd(cursor.getLong(offset + 1));
        entity.setMaxBankerCnt(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMaxBankerBet(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMaxPlayerCnt(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMaxPlayerBat(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SysGameBetBean entity, long rowId) {
        entity.setLevelStart(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SysGameBetBean entity) {
        if(entity != null) {
            return entity.getLevelStart();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SysGameBetBean entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
