package cn.feihutv.zhibofeihu.data.db.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SYS_HBBEAN".
*/
public class SysHBBeanDao extends AbstractDao<SysHBBean, String> {

    public static final String TABLENAME = "SYS_HBBEAN";

    /**
     * Properties of entity SysHBBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property SaleId = new Property(0, String.class, "saleId", true, "SALE_ID");
        public final static Property GoldCnt = new Property(1, String.class, "goldCnt", false, "GOLD_CNT");
        public final static Property Rmb = new Property(2, String.class, "rmb", false, "RMB");
        public final static Property GiveGold = new Property(3, String.class, "giveGold", false, "GIVE_GOLD");
    }


    public SysHBBeanDao(DaoConfig config) {
        super(config);
    }
    
    public SysHBBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SYS_HBBEAN\" (" + //
                "\"SALE_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: saleId
                "\"GOLD_CNT\" TEXT," + // 1: goldCnt
                "\"RMB\" TEXT," + // 2: rmb
                "\"GIVE_GOLD\" TEXT);"); // 3: giveGold
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SYS_HBBEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SysHBBean entity) {
        stmt.clearBindings();
 
        String saleId = entity.getSaleId();
        if (saleId != null) {
            stmt.bindString(1, saleId);
        }
 
        String goldCnt = entity.getGoldCnt();
        if (goldCnt != null) {
            stmt.bindString(2, goldCnt);
        }
 
        String rmb = entity.getRmb();
        if (rmb != null) {
            stmt.bindString(3, rmb);
        }
 
        String giveGold = entity.getGiveGold();
        if (giveGold != null) {
            stmt.bindString(4, giveGold);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SysHBBean entity) {
        stmt.clearBindings();
 
        String saleId = entity.getSaleId();
        if (saleId != null) {
            stmt.bindString(1, saleId);
        }
 
        String goldCnt = entity.getGoldCnt();
        if (goldCnt != null) {
            stmt.bindString(2, goldCnt);
        }
 
        String rmb = entity.getRmb();
        if (rmb != null) {
            stmt.bindString(3, rmb);
        }
 
        String giveGold = entity.getGiveGold();
        if (giveGold != null) {
            stmt.bindString(4, giveGold);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public SysHBBean readEntity(Cursor cursor, int offset) {
        SysHBBean entity = new SysHBBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // saleId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // goldCnt
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // rmb
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // giveGold
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SysHBBean entity, int offset) {
        entity.setSaleId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setGoldCnt(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRmb(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setGiveGold(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final String updateKeyAfterInsert(SysHBBean entity, long rowId) {
        return entity.getSaleId();
    }
    
    @Override
    public String getKey(SysHBBean entity) {
        if(entity != null) {
            return entity.getSaleId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SysHBBean entity) {
        return entity.getSaleId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
