package cn.feihutv.zhibofeihu.data.db.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SYS_GIFT_NEW_BEAN".
*/
public class SysGiftNewBeanDao extends AbstractDao<SysGiftNewBean, String> {

    public static final String TABLENAME = "SYS_GIFT_NEW_BEAN";

    /**
     * Properties of entity SysGiftNewBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Is520 = new Property(0, boolean.class, "is520", false, "IS520");
        public final static Property Is1314 = new Property(1, boolean.class, "is1314", false, "IS1314");
        public final static Property IsMount = new Property(2, boolean.class, "isMount", false, "IS_MOUNT");
        public final static Property Id = new Property(3, String.class, "id", true, "ID");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property IncomePercent = new Property(5, String.class, "incomePercent", false, "INCOME_PERCENT");
        public final static Property IsAnimation = new Property(6, String.class, "isAnimation", false, "IS_ANIMATION");
        public final static Property Tips = new Property(7, String.class, "tips", false, "TIPS");
        public final static Property ShelfBegin = new Property(8, String.class, "shelfBegin", false, "SHELF_BEGIN");
        public final static Property ShelfEnd = new Property(9, String.class, "shelfEnd", false, "SHELF_END");
        public final static Property TagIcon = new Property(10, String.class, "tagIcon", false, "TAG_ICON");
        public final static Property SortOrder = new Property(11, int.class, "sortOrder", false, "SORT_ORDER");
        public final static Property Icon = new Property(12, String.class, "icon", false, "ICON");
        public final static Property AnimName = new Property(13, String.class, "animName", false, "ANIM_NAME");
        public final static Property GiftCount = new Property(14, int.class, "giftCount", false, "GIFT_COUNT");
        public final static Property IsSelected = new Property(15, boolean.class, "isSelected", false, "IS_SELECTED");
        public final static Property EnableVip = new Property(16, int.class, "enableVip", false, "ENABLE_VIP");
    }


    public SysGiftNewBeanDao(DaoConfig config) {
        super(config);
    }
    
    public SysGiftNewBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SYS_GIFT_NEW_BEAN\" (" + //
                "\"IS520\" INTEGER NOT NULL ," + // 0: is520
                "\"IS1314\" INTEGER NOT NULL ," + // 1: is1314
                "\"IS_MOUNT\" INTEGER NOT NULL ," + // 2: isMount
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 3: id
                "\"NAME\" TEXT," + // 4: name
                "\"INCOME_PERCENT\" TEXT," + // 5: incomePercent
                "\"IS_ANIMATION\" TEXT," + // 6: isAnimation
                "\"TIPS\" TEXT," + // 7: tips
                "\"SHELF_BEGIN\" TEXT," + // 8: shelfBegin
                "\"SHELF_END\" TEXT," + // 9: shelfEnd
                "\"TAG_ICON\" TEXT," + // 10: tagIcon
                "\"SORT_ORDER\" INTEGER NOT NULL ," + // 11: sortOrder
                "\"ICON\" TEXT," + // 12: icon
                "\"ANIM_NAME\" TEXT," + // 13: animName
                "\"GIFT_COUNT\" INTEGER NOT NULL ," + // 14: giftCount
                "\"IS_SELECTED\" INTEGER NOT NULL ," + // 15: isSelected
                "\"ENABLE_VIP\" INTEGER NOT NULL );"); // 16: enableVip
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SYS_GIFT_NEW_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SysGiftNewBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getIs520() ? 1L: 0L);
        stmt.bindLong(2, entity.getIs1314() ? 1L: 0L);
        stmt.bindLong(3, entity.getIsMount() ? 1L: 0L);
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(4, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        String incomePercent = entity.getIncomePercent();
        if (incomePercent != null) {
            stmt.bindString(6, incomePercent);
        }
 
        String isAnimation = entity.getIsAnimation();
        if (isAnimation != null) {
            stmt.bindString(7, isAnimation);
        }
 
        String tips = entity.getTips();
        if (tips != null) {
            stmt.bindString(8, tips);
        }
 
        String shelfBegin = entity.getShelfBegin();
        if (shelfBegin != null) {
            stmt.bindString(9, shelfBegin);
        }
 
        String shelfEnd = entity.getShelfEnd();
        if (shelfEnd != null) {
            stmt.bindString(10, shelfEnd);
        }
 
        String tagIcon = entity.getTagIcon();
        if (tagIcon != null) {
            stmt.bindString(11, tagIcon);
        }
        stmt.bindLong(12, entity.getSortOrder());
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(13, icon);
        }
 
        String animName = entity.getAnimName();
        if (animName != null) {
            stmt.bindString(14, animName);
        }
        stmt.bindLong(15, entity.getGiftCount());
        stmt.bindLong(16, entity.getIsSelected() ? 1L: 0L);
        stmt.bindLong(17, entity.getEnableVip());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SysGiftNewBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getIs520() ? 1L: 0L);
        stmt.bindLong(2, entity.getIs1314() ? 1L: 0L);
        stmt.bindLong(3, entity.getIsMount() ? 1L: 0L);
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(4, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        String incomePercent = entity.getIncomePercent();
        if (incomePercent != null) {
            stmt.bindString(6, incomePercent);
        }
 
        String isAnimation = entity.getIsAnimation();
        if (isAnimation != null) {
            stmt.bindString(7, isAnimation);
        }
 
        String tips = entity.getTips();
        if (tips != null) {
            stmt.bindString(8, tips);
        }
 
        String shelfBegin = entity.getShelfBegin();
        if (shelfBegin != null) {
            stmt.bindString(9, shelfBegin);
        }
 
        String shelfEnd = entity.getShelfEnd();
        if (shelfEnd != null) {
            stmt.bindString(10, shelfEnd);
        }
 
        String tagIcon = entity.getTagIcon();
        if (tagIcon != null) {
            stmt.bindString(11, tagIcon);
        }
        stmt.bindLong(12, entity.getSortOrder());
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(13, icon);
        }
 
        String animName = entity.getAnimName();
        if (animName != null) {
            stmt.bindString(14, animName);
        }
        stmt.bindLong(15, entity.getGiftCount());
        stmt.bindLong(16, entity.getIsSelected() ? 1L: 0L);
        stmt.bindLong(17, entity.getEnableVip());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3);
    }    

    @Override
    public SysGiftNewBean readEntity(Cursor cursor, int offset) {
        SysGiftNewBean entity = new SysGiftNewBean( //
            cursor.getShort(offset + 0) != 0, // is520
            cursor.getShort(offset + 1) != 0, // is1314
            cursor.getShort(offset + 2) != 0, // isMount
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // id
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // incomePercent
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // isAnimation
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // tips
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // shelfBegin
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // shelfEnd
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // tagIcon
            cursor.getInt(offset + 11), // sortOrder
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // icon
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // animName
            cursor.getInt(offset + 14), // giftCount
            cursor.getShort(offset + 15) != 0, // isSelected
            cursor.getInt(offset + 16) // enableVip
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SysGiftNewBean entity, int offset) {
        entity.setIs520(cursor.getShort(offset + 0) != 0);
        entity.setIs1314(cursor.getShort(offset + 1) != 0);
        entity.setIsMount(cursor.getShort(offset + 2) != 0);
        entity.setId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIncomePercent(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIsAnimation(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTips(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setShelfBegin(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setShelfEnd(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setTagIcon(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setSortOrder(cursor.getInt(offset + 11));
        entity.setIcon(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setAnimName(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setGiftCount(cursor.getInt(offset + 14));
        entity.setIsSelected(cursor.getShort(offset + 15) != 0);
        entity.setEnableVip(cursor.getInt(offset + 16));
     }
    
    @Override
    protected final String updateKeyAfterInsert(SysGiftNewBean entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(SysGiftNewBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SysGiftNewBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
