package cn.feihutv.zhibofeihu.data.db.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SYS_GUARD_GOODS_BEAN".
*/
public class SysGuardGoodsBeanDao extends AbstractDao<SysGuardGoodsBean, String> {

    public static final String TABLENAME = "SYS_GUARD_GOODS_BEAN";

    /**
     * Properties of entity SysGuardGoodsBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property GoodsId = new Property(0, String.class, "goodsId", true, "GOODS_ID");
        public final static Property GoodsName = new Property(1, String.class, "goodsName", false, "GOODS_NAME");
        public final static Property Duration = new Property(2, String.class, "duration", false, "DURATION");
        public final static Property Yinhu = new Property(3, String.class, "yinhu", false, "YINHU");
        public final static Property Jinhu = new Property(4, String.class, "jinhu", false, "JINHU");
    }


    public SysGuardGoodsBeanDao(DaoConfig config) {
        super(config);
    }
    
    public SysGuardGoodsBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SYS_GUARD_GOODS_BEAN\" (" + //
                "\"GOODS_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: goodsId
                "\"GOODS_NAME\" TEXT," + // 1: goodsName
                "\"DURATION\" TEXT," + // 2: duration
                "\"YINHU\" TEXT," + // 3: yinhu
                "\"JINHU\" TEXT);"); // 4: jinhu
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SYS_GUARD_GOODS_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SysGuardGoodsBean entity) {
        stmt.clearBindings();
 
        String goodsId = entity.getGoodsId();
        if (goodsId != null) {
            stmt.bindString(1, goodsId);
        }
 
        String goodsName = entity.getGoodsName();
        if (goodsName != null) {
            stmt.bindString(2, goodsName);
        }
 
        String duration = entity.getDuration();
        if (duration != null) {
            stmt.bindString(3, duration);
        }
 
        String yinhu = entity.getYinhu();
        if (yinhu != null) {
            stmt.bindString(4, yinhu);
        }
 
        String jinhu = entity.getJinhu();
        if (jinhu != null) {
            stmt.bindString(5, jinhu);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SysGuardGoodsBean entity) {
        stmt.clearBindings();
 
        String goodsId = entity.getGoodsId();
        if (goodsId != null) {
            stmt.bindString(1, goodsId);
        }
 
        String goodsName = entity.getGoodsName();
        if (goodsName != null) {
            stmt.bindString(2, goodsName);
        }
 
        String duration = entity.getDuration();
        if (duration != null) {
            stmt.bindString(3, duration);
        }
 
        String yinhu = entity.getYinhu();
        if (yinhu != null) {
            stmt.bindString(4, yinhu);
        }
 
        String jinhu = entity.getJinhu();
        if (jinhu != null) {
            stmt.bindString(5, jinhu);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public SysGuardGoodsBean readEntity(Cursor cursor, int offset) {
        SysGuardGoodsBean entity = new SysGuardGoodsBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // goodsId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // goodsName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // duration
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // yinhu
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // jinhu
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SysGuardGoodsBean entity, int offset) {
        entity.setGoodsId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setGoodsName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDuration(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setYinhu(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setJinhu(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final String updateKeyAfterInsert(SysGuardGoodsBean entity, long rowId) {
        return entity.getGoodsId();
    }
    
    @Override
    public String getKey(SysGuardGoodsBean entity) {
        if(entity != null) {
            return entity.getGoodsId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SysGuardGoodsBean entity) {
        return entity.getGoodsId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
