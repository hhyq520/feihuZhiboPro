package cn.feihutv.zhibofeihu.data.db.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NOTICE_SYS_ENTITY".
*/
public class NoticeSysEntityDao extends AbstractDao<NoticeSysEntity, Long> {

    public static final String TABLENAME = "NOTICE_SYS_ENTITY";

    /**
     * Properties of entity NoticeSysEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Uid = new Property(1, String.class, "uid", false, "UID");
        public final static Property Time = new Property(2, int.class, "time", false, "TIME");
        public final static Property Content = new Property(3, String.class, "content", false, "CONTENT");
        public final static Property Action = new Property(4, String.class, "action", false, "ACTION");
        public final static Property Gift = new Property(5, int.class, "gift", false, "GIFT");
        public final static Property Cnt = new Property(6, int.class, "cnt", false, "CNT");
        public final static Property Amount = new Property(7, int.class, "amount", false, "AMOUNT");
        public final static Property ExpireAt = new Property(8, int.class, "expireAt", false, "EXPIRE_AT");
        public final static Property UserId = new Property(9, String.class, "userId", false, "USER_ID");
        public final static Property NickName = new Property(10, String.class, "nickName", false, "NICK_NAME");
        public final static Property AccountId = new Property(11, String.class, "accountId", false, "ACCOUNT_ID");
        public final static Property Tradeld = new Property(12, String.class, "tradeld", false, "TRADELD");
        public final static Property IsAccept = new Property(13, boolean.class, "isAccept", false, "IS_ACCEPT");
        public final static Property IsIgnore = new Property(14, boolean.class, "isIgnore", false, "IS_IGNORE");
    }


    public NoticeSysEntityDao(DaoConfig config) {
        super(config);
    }
    
    public NoticeSysEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NOTICE_SYS_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"UID\" TEXT," + // 1: uid
                "\"TIME\" INTEGER NOT NULL ," + // 2: time
                "\"CONTENT\" TEXT," + // 3: content
                "\"ACTION\" TEXT," + // 4: action
                "\"GIFT\" INTEGER NOT NULL ," + // 5: gift
                "\"CNT\" INTEGER NOT NULL ," + // 6: cnt
                "\"AMOUNT\" INTEGER NOT NULL ," + // 7: amount
                "\"EXPIRE_AT\" INTEGER NOT NULL ," + // 8: expireAt
                "\"USER_ID\" TEXT," + // 9: userId
                "\"NICK_NAME\" TEXT," + // 10: nickName
                "\"ACCOUNT_ID\" TEXT," + // 11: accountId
                "\"TRADELD\" TEXT," + // 12: tradeld
                "\"IS_ACCEPT\" INTEGER NOT NULL ," + // 13: isAccept
                "\"IS_IGNORE\" INTEGER NOT NULL );"); // 14: isIgnore
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NOTICE_SYS_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, NoticeSysEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(2, uid);
        }
        stmt.bindLong(3, entity.getTime());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(4, content);
        }
 
        String action = entity.getAction();
        if (action != null) {
            stmt.bindString(5, action);
        }
        stmt.bindLong(6, entity.getGift());
        stmt.bindLong(7, entity.getCnt());
        stmt.bindLong(8, entity.getAmount());
        stmt.bindLong(9, entity.getExpireAt());
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(10, userId);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(11, nickName);
        }
 
        String accountId = entity.getAccountId();
        if (accountId != null) {
            stmt.bindString(12, accountId);
        }
 
        String tradeld = entity.getTradeld();
        if (tradeld != null) {
            stmt.bindString(13, tradeld);
        }
        stmt.bindLong(14, entity.getIsAccept() ? 1L: 0L);
        stmt.bindLong(15, entity.getIsIgnore() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, NoticeSysEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(2, uid);
        }
        stmt.bindLong(3, entity.getTime());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(4, content);
        }
 
        String action = entity.getAction();
        if (action != null) {
            stmt.bindString(5, action);
        }
        stmt.bindLong(6, entity.getGift());
        stmt.bindLong(7, entity.getCnt());
        stmt.bindLong(8, entity.getAmount());
        stmt.bindLong(9, entity.getExpireAt());
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(10, userId);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(11, nickName);
        }
 
        String accountId = entity.getAccountId();
        if (accountId != null) {
            stmt.bindString(12, accountId);
        }
 
        String tradeld = entity.getTradeld();
        if (tradeld != null) {
            stmt.bindString(13, tradeld);
        }
        stmt.bindLong(14, entity.getIsAccept() ? 1L: 0L);
        stmt.bindLong(15, entity.getIsIgnore() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public NoticeSysEntity readEntity(Cursor cursor, int offset) {
        NoticeSysEntity entity = new NoticeSysEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // uid
            cursor.getInt(offset + 2), // time
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // content
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // action
            cursor.getInt(offset + 5), // gift
            cursor.getInt(offset + 6), // cnt
            cursor.getInt(offset + 7), // amount
            cursor.getInt(offset + 8), // expireAt
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // userId
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // nickName
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // accountId
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // tradeld
            cursor.getShort(offset + 13) != 0, // isAccept
            cursor.getShort(offset + 14) != 0 // isIgnore
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, NoticeSysEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTime(cursor.getInt(offset + 2));
        entity.setContent(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAction(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setGift(cursor.getInt(offset + 5));
        entity.setCnt(cursor.getInt(offset + 6));
        entity.setAmount(cursor.getInt(offset + 7));
        entity.setExpireAt(cursor.getInt(offset + 8));
        entity.setUserId(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setNickName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setAccountId(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setTradeld(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setIsAccept(cursor.getShort(offset + 13) != 0);
        entity.setIsIgnore(cursor.getShort(offset + 14) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(NoticeSysEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(NoticeSysEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(NoticeSysEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
