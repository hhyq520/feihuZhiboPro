package cn.feihutv.zhibofeihu.data.db.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RECENT_ITEM".
*/
public class RecentItemDao extends AbstractDao<RecentItem, String> {

    public static final String TABLENAME = "RECENT_ITEM";

    /**
     * Properties of entity RecentItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property UserId = new Property(0, String.class, "userId", true, "USER_ID");
        public final static Property HeadImg = new Property(1, String.class, "headImg", false, "HEAD_IMG");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Message = new Property(3, String.class, "message", false, "MESSAGE");
        public final static Property Time = new Property(4, long.class, "time", false, "TIME");
        public final static Property Uid = new Property(5, String.class, "uid", false, "UID");
        public final static Property IsRead = new Property(6, boolean.class, "isRead", false, "IS_READ");
    }


    public RecentItemDao(DaoConfig config) {
        super(config);
    }
    
    public RecentItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RECENT_ITEM\" (" + //
                "\"USER_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: userId
                "\"HEAD_IMG\" TEXT," + // 1: headImg
                "\"NAME\" TEXT," + // 2: name
                "\"MESSAGE\" TEXT," + // 3: message
                "\"TIME\" INTEGER NOT NULL ," + // 4: time
                "\"UID\" TEXT," + // 5: uid
                "\"IS_READ\" INTEGER NOT NULL );"); // 6: isRead
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RECENT_ITEM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RecentItem entity) {
        stmt.clearBindings();
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(1, userId);
        }
 
        String headImg = entity.getHeadImg();
        if (headImg != null) {
            stmt.bindString(2, headImg);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(4, message);
        }
        stmt.bindLong(5, entity.getTime());
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(6, uid);
        }
        stmt.bindLong(7, entity.getIsRead() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RecentItem entity) {
        stmt.clearBindings();
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(1, userId);
        }
 
        String headImg = entity.getHeadImg();
        if (headImg != null) {
            stmt.bindString(2, headImg);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(4, message);
        }
        stmt.bindLong(5, entity.getTime());
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(6, uid);
        }
        stmt.bindLong(7, entity.getIsRead() ? 1L: 0L);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public RecentItem readEntity(Cursor cursor, int offset) {
        RecentItem entity = new RecentItem( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // userId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // headImg
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // message
            cursor.getLong(offset + 4), // time
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // uid
            cursor.getShort(offset + 6) != 0 // isRead
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RecentItem entity, int offset) {
        entity.setUserId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setHeadImg(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMessage(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTime(cursor.getLong(offset + 4));
        entity.setUid(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIsRead(cursor.getShort(offset + 6) != 0);
     }
    
    @Override
    protected final String updateKeyAfterInsert(RecentItem entity, long rowId) {
        return entity.getUserId();
    }
    
    @Override
    public String getKey(RecentItem entity) {
        if(entity != null) {
            return entity.getUserId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RecentItem entity) {
        return entity.getUserId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
