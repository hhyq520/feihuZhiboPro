package cn.feihutv.zhibofeihu.data.db.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.feihutv.zhibofeihu.data.local.model.TCRoomInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TCROOM_INFO".
*/
public class TCRoomInfoDao extends AbstractDao<TCRoomInfo, String> {

    public static final String TABLENAME = "TCROOM_INFO";

    /**
     * Properties of entity TCRoomInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property RoomId = new Property(0, String.class, "roomId", true, "ROOM_ID");
        public final static Property RoomName = new Property(1, String.class, "roomName", false, "ROOM_NAME");
        public final static Property PlayUrl = new Property(2, String.class, "playUrl", false, "PLAY_URL");
        public final static Property RoomStatus = new Property(3, boolean.class, "roomStatus", false, "ROOM_STATUS");
        public final static Property BroadcastType = new Property(4, int.class, "broadcastType", false, "BROADCAST_TYPE");
        public final static Property OnlineUserCnt = new Property(5, int.class, "onlineUserCnt", false, "ONLINE_USER_CNT");
        public final static Property NickName = new Property(6, String.class, "NickName", false, "NICK_NAME");
        public final static Property HeadUrl = new Property(7, String.class, "headUrl", false, "HEAD_URL");
        public final static Property LiveCover = new Property(8, String.class, "LiveCover", false, "LIVE_COVER");
        public final static Property Location = new Property(9, String.class, "Location", false, "LOCATION");
        public final static Property IsRoomMgr = new Property(10, boolean.class, "IsRoomMgr", false, "IS_ROOM_MGR");
        public final static Property GameOwner = new Property(11, String.class, "GameOwner", false, "GAME_OWNER");
    }


    public TCRoomInfoDao(DaoConfig config) {
        super(config);
    }
    
    public TCRoomInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TCROOM_INFO\" (" + //
                "\"ROOM_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: roomId
                "\"ROOM_NAME\" TEXT," + // 1: roomName
                "\"PLAY_URL\" TEXT," + // 2: playUrl
                "\"ROOM_STATUS\" INTEGER NOT NULL ," + // 3: roomStatus
                "\"BROADCAST_TYPE\" INTEGER NOT NULL ," + // 4: broadcastType
                "\"ONLINE_USER_CNT\" INTEGER NOT NULL ," + // 5: onlineUserCnt
                "\"NICK_NAME\" TEXT," + // 6: NickName
                "\"HEAD_URL\" TEXT," + // 7: headUrl
                "\"LIVE_COVER\" TEXT," + // 8: LiveCover
                "\"LOCATION\" TEXT," + // 9: Location
                "\"IS_ROOM_MGR\" INTEGER NOT NULL ," + // 10: IsRoomMgr
                "\"GAME_OWNER\" TEXT);"); // 11: GameOwner
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TCROOM_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TCRoomInfo entity) {
        stmt.clearBindings();
 
        String roomId = entity.getRoomId();
        if (roomId != null) {
            stmt.bindString(1, roomId);
        }
 
        String roomName = entity.getRoomName();
        if (roomName != null) {
            stmt.bindString(2, roomName);
        }
 
        String playUrl = entity.getPlayUrl();
        if (playUrl != null) {
            stmt.bindString(3, playUrl);
        }
        stmt.bindLong(4, entity.getRoomStatus() ? 1L: 0L);
        stmt.bindLong(5, entity.getBroadcastType());
        stmt.bindLong(6, entity.getOnlineUserCnt());
 
        String NickName = entity.getNickName();
        if (NickName != null) {
            stmt.bindString(7, NickName);
        }
 
        String headUrl = entity.getHeadUrl();
        if (headUrl != null) {
            stmt.bindString(8, headUrl);
        }
 
        String LiveCover = entity.getLiveCover();
        if (LiveCover != null) {
            stmt.bindString(9, LiveCover);
        }
 
        String Location = entity.getLocation();
        if (Location != null) {
            stmt.bindString(10, Location);
        }
        stmt.bindLong(11, entity.getIsRoomMgr() ? 1L: 0L);
 
        String GameOwner = entity.getGameOwner();
        if (GameOwner != null) {
            stmt.bindString(12, GameOwner);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TCRoomInfo entity) {
        stmt.clearBindings();
 
        String roomId = entity.getRoomId();
        if (roomId != null) {
            stmt.bindString(1, roomId);
        }
 
        String roomName = entity.getRoomName();
        if (roomName != null) {
            stmt.bindString(2, roomName);
        }
 
        String playUrl = entity.getPlayUrl();
        if (playUrl != null) {
            stmt.bindString(3, playUrl);
        }
        stmt.bindLong(4, entity.getRoomStatus() ? 1L: 0L);
        stmt.bindLong(5, entity.getBroadcastType());
        stmt.bindLong(6, entity.getOnlineUserCnt());
 
        String NickName = entity.getNickName();
        if (NickName != null) {
            stmt.bindString(7, NickName);
        }
 
        String headUrl = entity.getHeadUrl();
        if (headUrl != null) {
            stmt.bindString(8, headUrl);
        }
 
        String LiveCover = entity.getLiveCover();
        if (LiveCover != null) {
            stmt.bindString(9, LiveCover);
        }
 
        String Location = entity.getLocation();
        if (Location != null) {
            stmt.bindString(10, Location);
        }
        stmt.bindLong(11, entity.getIsRoomMgr() ? 1L: 0L);
 
        String GameOwner = entity.getGameOwner();
        if (GameOwner != null) {
            stmt.bindString(12, GameOwner);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public TCRoomInfo readEntity(Cursor cursor, int offset) {
        TCRoomInfo entity = new TCRoomInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // roomId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // roomName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // playUrl
            cursor.getShort(offset + 3) != 0, // roomStatus
            cursor.getInt(offset + 4), // broadcastType
            cursor.getInt(offset + 5), // onlineUserCnt
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // NickName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // headUrl
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // LiveCover
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // Location
            cursor.getShort(offset + 10) != 0, // IsRoomMgr
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // GameOwner
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TCRoomInfo entity, int offset) {
        entity.setRoomId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setRoomName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPlayUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRoomStatus(cursor.getShort(offset + 3) != 0);
        entity.setBroadcastType(cursor.getInt(offset + 4));
        entity.setOnlineUserCnt(cursor.getInt(offset + 5));
        entity.setNickName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setHeadUrl(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setLiveCover(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setLocation(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setIsRoomMgr(cursor.getShort(offset + 10) != 0);
        entity.setGameOwner(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final String updateKeyAfterInsert(TCRoomInfo entity, long rowId) {
        return entity.getRoomId();
    }
    
    @Override
    public String getKey(TCRoomInfo entity) {
        if(entity != null) {
            return entity.getRoomId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TCRoomInfo entity) {
        return entity.getRoomId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
