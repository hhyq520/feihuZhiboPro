package cn.feihutv.zhibofeihu.data.db.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SYS_GOODS_NEW_BEAN".
*/
public class SysGoodsNewBeanDao extends AbstractDao<SysGoodsNewBean, String> {

    public static final String TABLENAME = "SYS_GOODS_NEW_BEAN";

    /**
     * Properties of entity SysGoodsNewBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property ObjType = new Property(2, String.class, "objType", false, "OBJ_TYPE");
        public final static Property ObjId = new Property(3, String.class, "objId", false, "OBJ_ID");
        public final static Property Price = new Property(4, String.class, "price", false, "PRICE");
        public final static Property Discount = new Property(5, String.class, "discount", false, "DISCOUNT");
        public final static Property Icon = new Property(6, String.class, "icon", false, "ICON");
        public final static Property ShelfBegin = new Property(7, String.class, "shelfBegin", false, "SHELF_BEGIN");
        public final static Property ShelfEnd = new Property(8, String.class, "shelfEnd", false, "SHELF_END");
        public final static Property Show = new Property(9, String.class, "show", false, "SHOW");
        public final static Property TagIcon = new Property(10, String.class, "tagIcon", false, "TAG_ICON");
        public final static Property SortOrder = new Property(11, int.class, "sortOrder", false, "SORT_ORDER");
        public final static Property GiftCount = new Property(12, int.class, "giftCount", false, "GIFT_COUNT");
        public final static Property IsSelected = new Property(13, boolean.class, "isSelected", false, "IS_SELECTED");
        public final static Property NeedVip = new Property(14, int.class, "needVip", false, "NEED_VIP");
    }


    public SysGoodsNewBeanDao(DaoConfig config) {
        super(config);
    }
    
    public SysGoodsNewBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SYS_GOODS_NEW_BEAN\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"OBJ_TYPE\" TEXT," + // 2: objType
                "\"OBJ_ID\" TEXT," + // 3: objId
                "\"PRICE\" TEXT," + // 4: price
                "\"DISCOUNT\" TEXT," + // 5: discount
                "\"ICON\" TEXT," + // 6: icon
                "\"SHELF_BEGIN\" TEXT," + // 7: shelfBegin
                "\"SHELF_END\" TEXT," + // 8: shelfEnd
                "\"SHOW\" TEXT," + // 9: show
                "\"TAG_ICON\" TEXT," + // 10: tagIcon
                "\"SORT_ORDER\" INTEGER NOT NULL ," + // 11: sortOrder
                "\"GIFT_COUNT\" INTEGER NOT NULL ," + // 12: giftCount
                "\"IS_SELECTED\" INTEGER NOT NULL ," + // 13: isSelected
                "\"NEED_VIP\" INTEGER NOT NULL );"); // 14: needVip
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SYS_GOODS_NEW_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SysGoodsNewBean entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String objType = entity.getObjType();
        if (objType != null) {
            stmt.bindString(3, objType);
        }
 
        String objId = entity.getObjId();
        if (objId != null) {
            stmt.bindString(4, objId);
        }
 
        String price = entity.getPrice();
        if (price != null) {
            stmt.bindString(5, price);
        }
 
        String discount = entity.getDiscount();
        if (discount != null) {
            stmt.bindString(6, discount);
        }
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(7, icon);
        }
 
        String shelfBegin = entity.getShelfBegin();
        if (shelfBegin != null) {
            stmt.bindString(8, shelfBegin);
        }
 
        String shelfEnd = entity.getShelfEnd();
        if (shelfEnd != null) {
            stmt.bindString(9, shelfEnd);
        }
 
        String show = entity.getShow();
        if (show != null) {
            stmt.bindString(10, show);
        }
 
        String tagIcon = entity.getTagIcon();
        if (tagIcon != null) {
            stmt.bindString(11, tagIcon);
        }
        stmt.bindLong(12, entity.getSortOrder());
        stmt.bindLong(13, entity.getGiftCount());
        stmt.bindLong(14, entity.getIsSelected() ? 1L: 0L);
        stmt.bindLong(15, entity.getNeedVip());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SysGoodsNewBean entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String objType = entity.getObjType();
        if (objType != null) {
            stmt.bindString(3, objType);
        }
 
        String objId = entity.getObjId();
        if (objId != null) {
            stmt.bindString(4, objId);
        }
 
        String price = entity.getPrice();
        if (price != null) {
            stmt.bindString(5, price);
        }
 
        String discount = entity.getDiscount();
        if (discount != null) {
            stmt.bindString(6, discount);
        }
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(7, icon);
        }
 
        String shelfBegin = entity.getShelfBegin();
        if (shelfBegin != null) {
            stmt.bindString(8, shelfBegin);
        }
 
        String shelfEnd = entity.getShelfEnd();
        if (shelfEnd != null) {
            stmt.bindString(9, shelfEnd);
        }
 
        String show = entity.getShow();
        if (show != null) {
            stmt.bindString(10, show);
        }
 
        String tagIcon = entity.getTagIcon();
        if (tagIcon != null) {
            stmt.bindString(11, tagIcon);
        }
        stmt.bindLong(12, entity.getSortOrder());
        stmt.bindLong(13, entity.getGiftCount());
        stmt.bindLong(14, entity.getIsSelected() ? 1L: 0L);
        stmt.bindLong(15, entity.getNeedVip());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public SysGoodsNewBean readEntity(Cursor cursor, int offset) {
        SysGoodsNewBean entity = new SysGoodsNewBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // objType
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // objId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // price
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // discount
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // icon
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // shelfBegin
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // shelfEnd
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // show
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // tagIcon
            cursor.getInt(offset + 11), // sortOrder
            cursor.getInt(offset + 12), // giftCount
            cursor.getShort(offset + 13) != 0, // isSelected
            cursor.getInt(offset + 14) // needVip
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SysGoodsNewBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setObjType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setObjId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPrice(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDiscount(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIcon(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setShelfBegin(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setShelfEnd(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setShow(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setTagIcon(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setSortOrder(cursor.getInt(offset + 11));
        entity.setGiftCount(cursor.getInt(offset + 12));
        entity.setIsSelected(cursor.getShort(offset + 13) != 0);
        entity.setNeedVip(cursor.getInt(offset + 14));
     }
    
    @Override
    protected final String updateKeyAfterInsert(SysGoodsNewBean entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(SysGoodsNewBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SysGoodsNewBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
